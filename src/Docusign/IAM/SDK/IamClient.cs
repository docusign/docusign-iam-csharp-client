//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Docusign.IAM.SDK
{
    using Docusign.IAM.SDK.Hooks;
    using Docusign.IAM.SDK.Models.Components;
    using Docusign.IAM.SDK.Models.Errors;
    using Docusign.IAM.SDK.Utils;
    using Docusign.IAM.SDK.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Docusign IAM API: Docusign IAM API
    /// </summary>
    public interface IIamClient
    {
        public IAuth Auth { get; }
        public IMaestro Maestro { get; }
        public INavigator Navigator { get; }
        public IConnectedFields ConnectedFields { get; }
    }


    /// <summary>
    /// Docusign IAM API: Docusign IAM API
    /// </summary>
    public class IamClient: IIamClient
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "1.0.0-beta.2";
        private const string _sdkGenVersion = "2.638.5";
        private const string _openapiDocVersion = "v1";
        public IAuth Auth { get; private set; }
        public IMaestro Maestro { get; private set; }
        public INavigator Navigator { get; private set; }
        public IConnectedFields ConnectedFields { get; private set; }

        public IamClient(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Auth = new Auth(SDKConfiguration);

            Maestro = new Maestro(SDKConfiguration);

            Navigator = new Navigator(SDKConfiguration);

            ConnectedFields = new ConnectedFields(SDKConfiguration);
        }

        public IamClient(string? accessToken = null, Func<string>? accessTokenSource = null, SDKConfig.Server? server = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Docusign.IAM.SDK.Models.Components.Security>? _securitySource = null;

            if(accessTokenSource != null)
            {
                _securitySource = () => new Docusign.IAM.SDK.Models.Components.Security() { AccessToken = accessTokenSource() };
            }
            else if(accessToken != null)
            {
                _securitySource = () => new Docusign.IAM.SDK.Models.Components.Security() { AccessToken = accessToken };
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerName = server,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Auth = new Auth(SDKConfiguration);

            Maestro = new Maestro(SDKConfiguration);

            Navigator = new Navigator(SDKConfiguration);

            ConnectedFields = new ConnectedFields(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServer(SDKConfig.Server server)
            {
                _sdkConfig.ServerName = server;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithAccessTokenSource(Func<string> accessTokenSource)
            {
                _sdkConfig.SecuritySource = () => new Docusign.IAM.SDK.Models.Components.Security() { AccessToken = accessTokenSource() };
                return this;
            }

            public SDKBuilder WithAccessToken(string accessToken)
            {
                _sdkConfig.SecuritySource = () => new Docusign.IAM.SDK.Models.Components.Security() { AccessToken = accessToken };
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public IamClient Build()
            {
              return new IamClient(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}