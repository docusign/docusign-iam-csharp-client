//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Docusign.IAM.SDK.Models.Components
{
    using Docusign.IAM.SDK.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// Terms specifying the payment due date, based on a defined number of days or other conditions.
    /// </summary>
    public enum PaymentTermsDueDate
    {
        [JsonProperty("UNDER_SEVEN_DAYS")]
        UnderSevenDays,
        [JsonProperty("SEVEN_DAYS")]
        SevenDays,
        [JsonProperty("FIFTEEN_DAYS")]
        FifteenDays,
        [JsonProperty("THIRTY_DAYS")]
        ThirtyDays,
        [JsonProperty("FORTY_FIVE_DAYS")]
        FortyFiveDays,
        [JsonProperty("SIXTY_DAYS")]
        SixtyDays,
        [JsonProperty("NINETY_DAYS")]
        NinetyDays,
        [JsonProperty("OVER_NINETY_DAYS")]
        OverNinetyDays,
        [JsonProperty("ON_RECEIPT")]
        OnReceipt,
        [JsonProperty("OTHER")]
        Other,
        [JsonProperty("SILENT")]
        Silent,
    }

    public static class PaymentTermsDueDateExtension
    {
        public static string Value(this PaymentTermsDueDate value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static PaymentTermsDueDate ToEnum(this string value)
        {
            foreach(var field in typeof(PaymentTermsDueDate).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is PaymentTermsDueDate)
                    {
                        return (PaymentTermsDueDate)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum PaymentTermsDueDate");
        }
    }

}